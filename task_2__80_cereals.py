# -*- coding: utf-8 -*-
"""TASK 2_ 80 CEREALS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b3oHiEokChcdTJZB0K9OJwLE-v98iMqy
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Set the style of the visualization
sns.set_style('whitegrid')

# Load the dataset
data = pd.read_csv('/content/cereal.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(data.head())

# Display the column names
print("\nColumn names:")
print(data.columns)

# Check for missing values
print("\nMissing values in each column:")
print(data.isnull().sum())

# Fill or drop missing values if necessary
# For simplicity, we will drop rows with missing values
data.dropna(inplace=True)

# Display basic statistics of the dataset
print("\nBasic statistics of the dataset:")
print(data.describe())

# Check data types
print("\nData types of each column:")
print(data.dtypes)

# Summary of the dataset
print("\nSummary of the dataset:")
print(data.info())

# Analyzing the distribution of ratings
plt.figure(figsize=(12, 6))
sns.histplot(data['rating'], kde=True)
plt.title('Distribution of Cereal Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Check data types to understand which columns are non-numeric
print("\nData types of each column:")
print(data.dtypes)

# Select only the numeric columns for correlation analysis
numeric_columns = data.select_dtypes(include=[np.number])

# Correlation matrix to understand relationships between numerical features
correlation_matrix = numeric_columns.corr()

# Plot the heatmap of the correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

# Scatter plot between sugar content and rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='sugars', y='rating', data=data)
plt.title('Relationship between Sugar Content and Rating')
plt.xlabel('Sugar Content (g)')
plt.ylabel('Rating')
plt.show()

# Scatter plot between fiber content and rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='fiber', y='rating', data=data)
plt.title('Relationship between Fiber Content and Rating')
plt.xlabel('Fiber Content (g)')
plt.ylabel('Rating')
plt.show()

# Boxplot of ratings by manufacturer
plt.figure(figsize=(14, 7))
sns.boxplot(x='mfr', y='rating', data=data)
plt.title('Cereal Ratings by Manufacturer')
plt.xlabel('Manufacturer')
plt.ylabel('Rating')
plt.show()

# Top 10 cereals by rating
top_10_cereals = data.sort_values(by='rating', ascending=False).head(10)
print("\nTop 10 cereals by rating:")
print(top_10_cereals[['name', 'rating']])

# Bar plot of top 10 cereals by rating
plt.figure(figsize=(14, 7))
sns.barplot(x='rating', y='name', data=top_10_cereals, palette='viridis')
plt.title('Top 10 Cereals by Rating')
plt.xlabel('Rating')
plt.ylabel('Cereal Name')
plt.show()

# Analysis of cereals with high sugar content
high_sugar_cereals = data[data['sugars'] > data['sugars'].mean()]
print("\nCereals with high sugar content:")
print(high_sugar_cereals[['name', 'sugars', 'rating']])

# Boxplot of fiber content by manufacturer
plt.figure(figsize=(14, 7))
sns.boxplot(x='mfr', y='fiber', data=data)
plt.title('Fiber Content by Manufacturer')
plt.xlabel('Manufacturer')
plt.ylabel('Fiber Content (g)')
plt.show()

# Scatter plot between calories and rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='calories', y='rating', data=data)
plt.title('Relationship between Calories and Rating')
plt.xlabel('Calories')
plt.ylabel('Rating')
plt.show()

# Scatter plot between protein content and rating
plt.figure(figsize=(12, 6))
sns.scatterplot(x='protein', y='rating', data=data)
plt.title('Relationship between Protein Content and Rating')
plt.xlabel('Protein Content (g)')
plt.ylabel('Rating')
plt.show()

